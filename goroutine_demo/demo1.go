package main

import (
	"fmt"
	"time"
)

// 进程就是程序在操系统中一次执行过程，是系统进行资源分配和调度的基本单位，进程是一个动态概念，
// 是程序在执行过程中分配和管理资源的基本单位，每个进程都有自己的地址空间，一个进程至少有五种状态，初始态，执行态，等等状态，就绪状态，终止状态。
// 也就是说进程就是一个正在执行的程序。
// 线程是进程的一个执行实例，是程序执行的最小单元，他是比进程更小的能独立运行的基本单位。
// 一个进程可以创建多个线程，同一个进程中的多个线程可以并发执行，一个程序要运行的话，至少有一个进程。

// 并发，多个线程同时竞争一个位置，竞争到的才可以执行，每一个时间段只有一个线程在执行
// 并行，多个线程可以同时执行，每个时间段，可以有多个线程同时执行
// 简单来说：多线程程序在单核CPU上运行就是并发，多线程程序在多核CPU上运行就是并行，如果线程数大于CPU核数，则多线程程序在多个CPU上面运行既有并行也有并发

// 并发特点,多个任务作用在一个cpu上，同一时间点只能有一个任务执行，同一个时间段内执行多个任务。
// 并行特点，多个任务作用在多个CPU上，统一时刻执行多个任务

// golang中的主线程可以理解为线程也可以理解为经常，在一个golang程序中主线程可以起多个协程，多个协程可以实现并行或者并发
// 协程可以理解为用户级线程，但是golang中的协程Go运行时系统（Goroutine Scheduler）在用户空间中实现的，而不是由操作系统内核负责管理。
// 这意味着Go协程的创建、调度和销毁等操作都是在用户程序中完成的，无需涉及操作系统的内核调度，也就是对内核透明，系统并不知道协程的存在
func Test() {
	for i := 0; i < 3; i++ {
		fmt.Println("Test() hello", i)
		time.Sleep(time.Millisecond * 100)
	}
}
func main() {
	go Test() //开启一个协程
	for i := 0; i < 3; i++ {
		fmt.Println("main() hello", i)
		time.Sleep(time.Millisecond * 20)
	}
}
