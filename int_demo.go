package main

import (
	"fmt"
	"unsafe"
)

// 整数数据类型
// int8：8位有符号整数，取值范围从-128到127。
// uint8：8位无符号整数，取值范围从0到255。

// int16：16位有符号整数，取值范围从-32768到32767。
// uint16：16位无符号整数，取值范围从0到65535。

// int32：32位有符号整数，取值范围从-2147483648到2147483647。
// uint32：32位无符号整数，取值范围从0到4294967295。

// int64：64位有符号整数，取值范围从-9223372036854775808到9223372036854775807。
// uint64：64位无符号整数，取值范围从0到18446744073709551615。

// 上面的类型它们的长度不受系统架构的影响，始终是固定的，此外，Go语言还提供了两个与平台相关的整数类型：
// int：有符号整数类型，int可以是32位或64位的有符号整数。
// uint：与int相对应的无符号整数类型，同样根据计算机架构可以是32位或64位。
// 在32位系统中：
// int类型通常是32位有符号整数，取值范围从-2147483648到2147483647。
// uint类型通常是32位无符号整数，取值范围从0到4294967295。
// 在64位系统中：
// int类型通常是64位有符号整数，取值范围从-9223372036854775808到9223372036854775807。
// uint类型通常是64位无符号整数，取值范围从0到18446744073709551615。
func main() {
	//整数类型只声明，不赋值默认是0,unsafe.Sizeof方法可以查看占用多少存储空间(字节)
	var num int
	fmt.Printf("num 数据类型为%T，值为%v，占用存储空间为%v字节\n", num, num, unsafe.Sizeof(num))

	//如果不指定类型，默认是int类型
	num1 := 1000
	fmt.Printf("num2 数据类型为%T，值为%[1]v，占用存储空间为%v字节\n", num1, unsafe.Sizeof(num1))

	var num2 = 1000
	fmt.Printf("num2 数据类型为%T，值为%[1]v，占用存储空间为%v字节\n", num2, unsafe.Sizeof(num2))

	//初始化赋值的时候,也可以显式指定类型
	var num3 int = 1000
	fmt.Printf("num3 数据类型为%T，值为%[1]v，占用存储空间为%v字节\n", num3, unsafe.Sizeof(num3))

	//初始化赋值int64
	var num4 int64 = 1000
	fmt.Printf("num4 数据类型为%T，值为%[1]v，占用存储空间为%v字节\n", num4, unsafe.Sizeof(num4))

	//如果某个数超过了该类型的大小，就会发生环绕，例如，如果test是uint8，最大值为255，计算超过了该值，则会变成0,所以在设计的时候需要特别注意
	var num5 uint8 = 255
	fmt.Printf("num5 数据类型为%T，值为%[1]v，占用存储空间为%v字节\n", num5, unsafe.Sizeof(num5))
	num5++
	fmt.Printf("num5 数据类型为%T，值为%[1]v，占用存储空间为%v字节\n", num5, unsafe.Sizeof(num5))

	//高位如果向低位转换需要注意不要超出低位的长度
	var num6 = 140
	fmt.Printf("num6 数据类型为%T，值为%[1]v，占用存储空间为%v字节\n", int8(num6), unsafe.Sizeof(num6))

	var num7 int = 223372036854775807
	//输出数字字面量,其他进制
	fmt.Printf("num7 数据类型为%[1]T，值为%[1]v，十进制为%[1]d，二进制为%[1]b，八进制为%[1]o，十六进制为%[1]x，占用存储空间为%v字节\n", num7, unsafe.Sizeof(num7))

}
